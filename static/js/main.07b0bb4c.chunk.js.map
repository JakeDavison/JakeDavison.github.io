{"version":3,"sources":["StatsNode.js","Stats.js","App.js","reportWebVitals.js","index.js"],"names":["StatsNode","props","data","React","value","setValue","generateCountdown","total","days","Math","floor","hours","mins","secs","dataType","interval","setInterval","scheduleCountdown","parseFloat","toFixed","className","label","ETHERMINE_URL","sum","a","b","Stats","minerId","etherDashResponse","setEtherDashResponse","etherStatsResponse","setEtherStatsResponse","ethEur","setEthEur","setEthermineResponse","fetch","then","r","json","body","status","fetchEtherDashData","fetchEtherStatsData","EUR","fetchEthEur","currentStatistics","currentStats","avgHashes","ethermineResponse","sortedHashrates","statistics","sort","time","totalHashrates24","map","i","currentHashrate","reduce","totalHashrates12","slice","length","totalHashrates6","avgReportedHash","reportedHashrate","avgHash24","avgHash12","avgHash6","getAverageHashrates","unpaidBalance","unpaid","earnings","coinsPerMin","secsToPayout","Grid","style","flex","container","spacing","item","xs","renderStatsNodes","App","setMinerId","TextField","variant","onChange","e","target","inputProps","textAlign","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.07b0bb4c.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport './StatsNode.css';\r\n\r\n\r\nexport default function StatsNode(props) {\r\n\r\n    var data = props.data;\r\n\r\n    const [value, setValue] = React.useState();\r\n\r\n    function scheduleCountdown() {\r\n        const interval = setInterval(() => {\r\n            data -= 1;\r\n            generateCountdown();\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.dataType === \"secs\") {\r\n            scheduleCountdown();\r\n        }\r\n    }, []);\r\n\r\n    function generateCountdown() {\r\n        let total = data;\r\n        let days = Math.floor(total / (60 * 60 * 24));\r\n        total -= days * 60 * 60 * 24;\r\n        let hours = Math.floor(total / (60 * 60));\r\n        total -= hours * 60 * 60;\r\n        let mins = Math.floor(total / 60);\r\n        total -= mins * 60;\r\n        let secs = Math.floor(total);\r\n        setValue((days ? (days + \" Days \") : \"\") + (hours ? (hours + \" Hours \\n\") : \"\") + (mins ? (mins + \" Mins \") : \"\") + (secs + \" Secs\"));\r\n    }\r\n\r\n    if (!value) {\r\n        switch (props.dataType) {\r\n            case \"hashrate\":\r\n                setValue((parseFloat(data) / 1000000).toFixed(2) + \" MH/s\");\r\n                break;\r\n            case \"eur\":\r\n                setValue(\"â‚¬\" + parseFloat(data).toFixed(2));\r\n                break;\r\n            case \"secs\":\r\n                generateCountdown();\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"Data\">\r\n                {value}\r\n            </div>\r\n            <div className=\"Label\">\r\n                {props.label}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import * as React from \"react\";\r\nimport StatsNode from \"./StatsNode\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst ETHERMINE_URL = \"https://api.ethermine.org/\";\r\nconst ETH_EUR_URL = \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=EUR\";\r\n\r\nconst payoutAmount = 0.1\r\n\r\n\r\nconst sum = (a, b) => a + b;\r\n\r\n\r\nfunction fetchEtherDashData(minerId, setEthermineResponse) {\r\n    fetch(ETHERMINE_URL + \"miner/\" + minerId + \"/dashboard\")\r\n        .then((r) => r.json())\r\n        .then((body) => setEthermineResponse({status: body.status, data: body.data}));\r\n}\r\n\r\nfunction fetchEtherStatsData(minerId, setEthermineResponse) {\r\n    fetch(ETHERMINE_URL + \"miner/\" + minerId + \"/currentStats\")\r\n        .then((r) => r.json())\r\n        .then((body) => setEthermineResponse({status: body.status, data: body.data}));\r\n}\r\n\r\nfunction fetchEthEur(setEthEur) {\r\n    fetch(ETH_EUR_URL)\r\n        .then((r) => r.json())\r\n        .then((body) => setEthEur(body.EUR));\r\n}\r\n\r\n\r\n\r\nfunction getAverageHashrates(ethermineResponse) {\r\n    let sortedHashrates = ethermineResponse.data.statistics.sort((a, b) => a.time > b.time);\r\n\r\n    let totalHashrates24 = sortedHashrates.map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalHashrates12 = sortedHashrates.slice(sortedHashrates.length-73, sortedHashrates.length-1).map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalHashrates6 = sortedHashrates.slice(sortedHashrates.length-37, sortedHashrates.length-1).map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalReported = sortedHashrates.map((i) => i.reportedHashrate).reduce(sum, 0);\r\n\r\n    return {\r\n        avgReportedHash: totalReported/sortedHashrates.length,\r\n        avgHash24: totalHashrates24/sortedHashrates.length,\r\n        avgHash12: totalHashrates12/sortedHashrates.slice(sortedHashrates.length-73, sortedHashrates.length-1).length,\r\n        avgHash6: totalHashrates6/sortedHashrates.slice(sortedHashrates.length-37, sortedHashrates.length-1).length\r\n    };\r\n}\r\n\r\n\r\n\r\nexport default function Stats(props) {\r\n\r\n    function renderStatsPanel() {\r\n        if (etherDashResponse && etherStatsResponse && ethEur) {\r\n            return etherDashResponse.status === \"OK\" && etherStatsResponse.status === \"OK\" ?\r\n                renderStatsNodes() : \"Couldn't get data from Ethermine, status was: \" + etherDashResponse.status;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function renderStatsNodes() {\r\n\r\n        if (etherDashResponse.data && etherDashResponse.data.currentStatistics && etherStatsResponse.data) {\r\n            let currentStats = etherDashResponse.data.currentStatistics;\r\n            let avgHashes = getAverageHashrates(etherDashResponse);\r\n            let unpaidBalance = (etherStatsResponse.data.unpaid * 1e-18) * ethEur;\r\n            let earnings = etherStatsResponse.data.coinsPerMin * ethEur * 60 * 24;\r\n            let secsToPayout = (0.1 - (etherStatsResponse.data.unpaid * 1e-18))/(etherStatsResponse.data.coinsPerMin/60);\r\n            return (\r\n                <Grid style={{flex: 3}} container spacing={3}>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Unpaid Balance\" data={unpaidBalance} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Time To Payout\" data={secsToPayout} dataType=\"secs\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Payout Amount\" data={payoutAmount*ethEur} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Day\" data={earnings} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Week\" data={earnings*7} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Month\" data={earnings*30} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Year\" data={earnings*365} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Current Hashrate\" data={currentStats.currentHashrate} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Reported Hashrate\" data={currentStats.reportedHashrate} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Reported Hashrate - Last 24H\" data={avgHashes.avgReportedHash} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 24h\" data={avgHashes.avgHash24} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 12h\" data={avgHashes.avgHash12} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 6h\" data={avgHashes.avgHash6} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n        return \"No data in Ethermine response.\";\r\n    }\r\n\r\n    var minerId = props.minerId;\r\n\r\n    const [etherDashResponse, setEtherDashResponse] = React.useState(null);\r\n    const [etherStatsResponse, setEtherStatsResponse] = React.useState(null);\r\n    const [ethEur, setEthEur] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        fetchEtherDashData(minerId, setEtherDashResponse);\r\n        fetchEtherStatsData(minerId, setEtherStatsResponse);\r\n        if(!ethEur) {fetchEthEur(setEthEur);}\r\n    }, [minerId]);\r\n\r\n\r\n    return (\r\n        <div>\r\n            {renderStatsPanel()}\r\n        </div>\r\n    );\r\n}","import './App.css';\nimport TextField from \"@material-ui/core/TextField\";\nimport * as React from \"react\";\nimport Stats from \"./Stats\";\n\nfunction App() {\n\n    const [minerId, setMinerId] = React.useState(\"14b4DAB2b580BA2Ac1849055Ae8820Be87d8564E\");\n\n\n\n    return (\n        <div className=\"App\">\n            <TextField\n                className=\"MinerIdInput\"\n                variant=\"outlined\"\n                value={minerId}\n                onChange={(e) => setMinerId(e.target.value)}\n                inputProps={{style: {textAlign: 'center'}}}\n            />\n            <div className=\"App-header\">\n                {/*<EthChart/>*/}\n                <Stats minerId={minerId}/>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}