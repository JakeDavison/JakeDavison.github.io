{"version":3,"sources":["StatsNode.js","Stats.js","EthChart.js","App.js","index.js"],"names":["StatsNode","props","data","React","value","setValue","useFitText","fontSize","ref","generateCountdown","total","days","Math","floor","hours","mins","secs","dataType","interval","setInterval","scheduleCountdown","parseFloat","toFixed","style","className","label","ETHERMINE_URL","sum","a","b","Stats","minerId","useParams","etherDashResponse","setEtherDashResponse","etherStatsResponse","setEtherStatsResponse","ethEur","setEthEur","setEthermineResponse","fetch","then","r","json","body","status","fetchEtherDashData","fetchEtherStatsData","EUR","fetchEthEur","currentStatistics","ethPerMin","coinsPerMin","currentStats","avgHashes","ethermineResponse","sortedHashrates","statistics","sort","time","totalHashrates24","map","i","currentHashrate","reduce","totalHashrates12","slice","length","totalHashrates6","avgReportedHash","reportedHashrate","avgHash24","avgHash12","avgHash6","getAverageHashrates","unpaidBalance","unpaid","earnings","secsToThreshold","secsToWeekend","now","Date","weekend","getSecsToWeekend","payoutAmount","unpaidSummary","console","log","Grid","flex","container","spacing","item","xs","min","renderStatsNodes","EthChart","id","srcDoc","App","minerIdInput","setMinerIdInput","history","useHistory","path","TextField","variant","onKeyDown","e","key","push","onChange","target","inputProps","textAlign","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.bbed5dc4.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport useFitText from \"use-fit-text\";\r\nimport './StatsNode.css';\r\n\r\n\r\nexport default function StatsNode(props) {\r\n\r\n    var data = props.data;\r\n\r\n    const [value, setValue] = React.useState();\r\n    const { fontSize, ref } = useFitText();\r\n\r\n\r\n    function scheduleCountdown() {\r\n        const interval = setInterval(() => {\r\n            data -= 1;\r\n            generateCountdown();\r\n        }, 1000);\r\n        return () => clearInterval(interval);\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (props.dataType === \"secs\") {\r\n            scheduleCountdown();\r\n        }\r\n    }, []);\r\n\r\n    function generateCountdown() {\r\n        let total = data;\r\n        let days = Math.floor(total / (60 * 60 * 24));\r\n        total -= days * 60 * 60 * 24;\r\n        let hours = Math.floor(total / (60 * 60));\r\n        total -= hours * 60 * 60;\r\n        let mins = Math.floor(total / 60);\r\n        total -= mins * 60;\r\n        let secs = Math.floor(total);\r\n        setValue((days ? (days + \" Days \") : \"\") + (hours ? (hours + \" Hours \\n\") : \"\") + (mins ? (mins + \" Mins \") : \"\") + (secs + \" Secs\"));\r\n    }\r\n\r\n    if (!value) {\r\n        switch (props.dataType) {\r\n            case \"hashrate\":\r\n                setValue((parseFloat(data) / 1000000).toFixed(2) + \" MH/s\");\r\n                break;\r\n            case \"eur\":\r\n                setValue(\"â‚¬\" + parseFloat(data).toFixed(2));\r\n                break;\r\n            case \"secs\":\r\n                generateCountdown();\r\n                break;\r\n            default:\r\n                setValue(data);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div ref={ref} style={{fontSize: fontSize}} className=\"Data\">\r\n                {value}\r\n            </div>\r\n            <div className=\"Label\">\r\n                {props.label}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import * as React from \"react\";\r\nimport StatsNode from \"./StatsNode\";\r\nimport './Stats.css';\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nconst ETHERMINE_URL = \"https://api.ethermine.org/\";\r\nconst ETH_EUR_URL = \"https://min-api.cryptocompare.com/data/price?fsym=ETH&tsyms=EUR\";\r\n\r\nconst payoutThreshold = 0.1\r\n\r\n\r\n\r\nconst sum = (a, b) => a + b;\r\n\r\n\r\nfunction fetchEtherDashData(minerId, setEthermineResponse) {\r\n    fetch(ETHERMINE_URL + \"miner/\" + minerId + \"/dashboard\")\r\n        .then((r) => r.json())\r\n        .then((body) => setEthermineResponse({status: body.status, data: body.data}));\r\n}\r\n\r\nfunction fetchEtherStatsData(minerId, setEthermineResponse) {\r\n    fetch(ETHERMINE_URL + \"miner/\" + minerId + \"/currentStats\")\r\n        .then((r) => r.json())\r\n        .then((body) => setEthermineResponse({status: body.status, data: body.data}));\r\n}\r\n\r\nfunction fetchEthEur(setEthEur) {\r\n    fetch(ETH_EUR_URL)\r\n        .then((r) => r.json())\r\n        .then((body) => setEthEur(body.EUR));\r\n}\r\n\r\n\r\n\r\nfunction getAverageHashrates(ethermineResponse) {\r\n    let sortedHashrates = ethermineResponse.data.statistics.sort((a, b) => a.time > b.time);\r\n\r\n    let totalHashrates24 = sortedHashrates.map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalHashrates12 = sortedHashrates.slice(sortedHashrates.length-73, sortedHashrates.length-1).map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalHashrates6 = sortedHashrates.slice(sortedHashrates.length-37, sortedHashrates.length-1).map((i) => i.currentHashrate)\r\n        .reduce(sum, 0);\r\n\r\n    let totalReported = sortedHashrates.map((i) => i.reportedHashrate).reduce(sum, 0);\r\n\r\n    return {\r\n        avgReportedHash: totalReported/sortedHashrates.length,\r\n        avgHash24: totalHashrates24/sortedHashrates.length,\r\n        avgHash12: totalHashrates12/sortedHashrates.slice(sortedHashrates.length-73, sortedHashrates.length-1).length,\r\n        avgHash6: totalHashrates6/sortedHashrates.slice(sortedHashrates.length-37, sortedHashrates.length-1).length\r\n    };\r\n}\r\n\r\n\r\nfunction getSecsToWeekend() {\r\n\r\n    const now = Date.now();\r\n    var weekend = 1614902399000;\r\n\r\n    while (weekend < now) {\r\n        weekend += (1000*60*60*24*7*2);\r\n    }\r\n\r\n    return (weekend - now)/1000;\r\n\r\n}\r\n\r\nexport default function Stats(props) {\r\n\r\n    let { minerId } = useParams();\r\n\r\n    function renderStatsPanel() {\r\n        if (etherDashResponse && etherStatsResponse && ethEur) {\r\n            return etherDashResponse.status === \"OK\" && etherStatsResponse.status === \"OK\" ?\r\n                renderStatsNodes() : \"Couldn't get data from Ethermine, status was: \" + etherDashResponse.status;\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    function renderStatsNodes() {\r\n\r\n        if (etherDashResponse.data && etherDashResponse.data.currentStatistics && etherStatsResponse.data) {\r\n            const ethPerMin = etherStatsResponse.data.coinsPerMin;\r\n\r\n            let currentStats = etherDashResponse.data.currentStatistics;\r\n            let avgHashes = getAverageHashrates(etherDashResponse);\r\n            let unpaidBalance = etherStatsResponse.data.unpaid * 1e-18;\r\n            let earnings = ethPerMin * ethEur * 60 * 24;\r\n\r\n            let secsToThreshold = (0.1 - (etherStatsResponse.data.unpaid * 1e-18)) / (ethPerMin / 60);\r\n            let secsToWeekend = getSecsToWeekend();\r\n\r\n            let payoutAmount = secsToWeekend < secsToThreshold ? ((secsToWeekend/60)*ethPerMin*ethEur) + unpaidBalance : payoutThreshold*ethEur;\r\n\r\n            let unpaidSummary = \"â‚¬\" + (unpaidBalance*ethEur).toFixed(2) + \" / \" + unpaidBalance.toFixed(6) + \" ETH\";\r\n            console.log(unpaidSummary)\r\n            return (\r\n                <Grid style={{flex: 3}} container spacing={3}>\r\n                    <Grid item xs={6}>\r\n                        <StatsNode label=\"Unpaid Balance\" data={unpaidSummary}/>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <StatsNode label=\"ETH Price\" data={ethEur} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={8}>\r\n                        <StatsNode label=\"Time To Payout\" data={Math.min(secsToWeekend, secsToThreshold)} dataType=\"secs\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Payout Amount\" data={payoutAmount} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Day\" data={earnings} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Week\" data={earnings*7} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Month\" data={earnings*30} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={3}>\r\n                        <StatsNode label=\"Estimated Earnings Per Year\" data={earnings*365} dataType=\"eur\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Current Hashrate\" data={currentStats.currentHashrate} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Reported Hashrate\" data={currentStats.reportedHashrate} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Reported Hashrate - Last 24H\" data={avgHashes.avgReportedHash} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 24h\" data={avgHashes.avgHash24} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 12h\" data={avgHashes.avgHash12} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <StatsNode label=\"Average Hashrate - Last 6h\" data={avgHashes.avgHash6} dataType=\"hashrate\"/>\r\n                    </Grid>\r\n                </Grid>\r\n            );\r\n        }\r\n        return \"No data in Ethermine response.\";\r\n    }\r\n\r\n    const [etherDashResponse, setEtherDashResponse] = React.useState(null);\r\n    const [etherStatsResponse, setEtherStatsResponse] = React.useState(null);\r\n    const [ethEur, setEthEur] = React.useState(null);\r\n\r\n    React.useEffect(() => {\r\n        fetchEtherDashData(minerId, setEtherDashResponse);\r\n        fetchEtherStatsData(minerId, setEtherStatsResponse);\r\n        if(!ethEur) {fetchEthEur(setEthEur);}\r\n    }, [minerId]);\r\n\r\n\r\n    return (\r\n        <div className=\"StatsPanel\">\r\n            {renderStatsPanel()}\r\n        </div>\r\n    );\r\n}","import \"./Chart.css\"\r\n\r\nexport default function EthChart() {\r\n\r\n    const html = `<html lang=\"en\"> <div class=\"tradingview-widget-container\"> <div class=\"tradingview-widget-container__widget\"></div> <div class=\"tradingview-widget-copyright\"><a href=\"https://www.tradingview.com/symbols/ETHEUR/?exchange=KRAKEN\" rel=\"noopener\" target=\"_blank\"><span class=\"blue-text\">ETHEUR Rates</span></a> by TradingView</div> <script type=\"text/javascript\" src=\"https://s3.tradingview.com/external-embedding/embed-widget-mini-symbol-overview.js\" async> { \"symbol\": \"KRAKEN:ETHEUR\", \"width\": 350, \"height\": 220, \"locale\": \"en\", \"dateRange\": \"1M\", \"colorTheme\": \"light\", \"trendLineColor\": \"#37a6ef\", \"underLineColor\": \"#E3F2FD\", \"isTransparent\": false, \"autosize\": false, \"largeChartUrl\": \"\" } </script> </div> </html>`\r\n\r\n    return(<iframe id=\"Chart\" srcDoc={html} />);\r\n\r\n}","import './App.css';\nimport TextField from \"@material-ui/core/TextField\";\nimport * as React from \"react\";\nimport Stats from \"./Stats\";\nimport EthChart from \"./EthChart\";\nimport {Switch, Route, useHistory} from \"react-router-dom\";\n\nfunction App() {\n\n    const [minerIdInput, setMinerIdInput] = React.useState(null);\n\n    const history = useHistory();\n\n    const handleKeyDown = (event) => {\n        if (event.key === 'Enter') {\n            history.push('/' + minerIdInput);\n        }\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"App-header\">\n                <EthChart/>\n                <Switch>\n                    <Route path=\"/:minerId\">\n                        <Stats/>\n                    </Route>\n                    <Route path=\"/\">\n                        <TextField\n                            className=\"MinerIdInput\"\n                            variant=\"outlined\"\n                            value={minerIdInput}\n                            onKeyDown={(e) => handleKeyDown(e)}\n                            onChange={(e) => setMinerIdInput(e.target.value)}\n                            inputProps={{style: {textAlign: 'center'}}}\n                        />\n                    </Route>\n                </Switch>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Router basename={process.env.PUBLIC_URL}>\n            <Route path=\"/\">\n                <App/>\n            </Route>\n        </Router>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}